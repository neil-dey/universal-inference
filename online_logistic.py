import numpy as np
import scipy.stats as st
from scipy.optimize import minimize
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings("error")

np.random.seed(0)
boot_iters = 100

def p(x, theta):
    try:
        return 1/(1+np.exp(-theta[0] - theta[1]*x))
    except RuntimeWarning:
        print((theta[0], theta[1]))
        exit()

def loss(x, y, theta):
    try:
        return (1 + np.exp(y * (theta[0] + theta[1] * x)))**-2
    except RuntimeWarning:
        print(x, y, theta[0], theta[1])
        exit()

def emprisk(theta, xs, ys):
    return sum([loss(x, y, theta) for (x, y) in zip(xs, ys)])
def emprisk_jac(theta, xs, ys):
    try:
        return sum([-2*(1 + np.exp(y * (theta[0] + theta[1] * x)))**-3 * np.exp(y * (theta[0] + theta[1]*x)) * y * np.array([1, x]) for (x, y) in zip(xs, ys)])
    except RuntimeWarning:
        print(x, y, theta[0], theta[1])
        exit()

def precompute(true_theta, data):
    thetahats = []
    xs = []
    ys = []
    for (x, y) in data:
        xs.append(x)
        ys.append(y)
        thetahat = minimize(emprisk, x0 = np.array([1, 1]), args = (xs, ys), method = "L-BFGS-B", jac = emprisk_jac, bounds = ((-100, 100), (-100, 100))).x
        thetahats.append(thetahat)

    return -1*sum([loss(x, y, thetahat) - loss(x, y, true_theta) for (x, y, thetahat) in zip(xs, ys, thetahats)])

def _gibbs(true_theta, data, alpha, omega):
    thetahats = []
    xs = []
    ys = []
    for (x, y) in data:
        xs.append(x)
        ys.append(y)
        thetahat = minimize(emprisk, x0 = np.array([1, 1]), args = (xs, ys), method = "L-BFGS-B", jac = emprisk_jac, bounds = ((-100, 100), (-100, 100))).x
        thetahats.append(thetahat)

    log_gue = -1*omega*sum([loss(x, y, thetahat) - loss(x, y, true_theta) for (x, y, thetahat) in zip(xs, ys, thetahats)])

    return log_gue < np.log(1/alpha)

def gibbs(true_theta, data, alpha):
    thetahat = minimize(emprisk, x0 = np.array([1, 1]), args = (xs, ys), method = "L-BFGS-B", jac = emprisk_jac, bounds = ((-100, 100), (-100, 100))).x
    omegas = np.linspace(0, 2, num=1000)[1:]
    coverages = np.zeros(len(omegas))
    for _ in range(boot_iters):
        boot_data = data[np.random.choice(len(data), len(data), replace = True)]
        p = precompute(thetahat, boot_data)
        for idx, omega in enumerate(omegas):
            if omega * p < np.log(1/alpha):
                coverages[idx] += 1

    coverages /= boot_iters
    omega = omegas[np.argmin([abs(alpha - (1-coverage)) for coverage in coverages])]
    return omega # _gibbs(true_theta, data, alpha, omega)

xs = list(st.norm.rvs(0, 1, 2))
ys = [1 if np.random.rand() < p(x, [1, 1]) else -1 for x in xs]
omegas = []
for n in range(48):
    continue
    new_x = st.norm.rvs()
    xs.append(new_x)
    if np.random.rand() < p(new_x, [1, 1]):
        ys.append(1)
    else:
        ys.append(-1)


    omegas.append(gibbs(np.array([1, 1]), np.array([z for z in zip(xs, ys)]), 0.05))
    print(n+3)
    print(omegas)
    print()

#omegas = [0.002002002002002002, 0.002002002002002002, 0.002002002002002002, 0.002002002002002002, 0.002002002002002002, 0.002002002002002002, 1.7937937937937938, 1.5295295295295295, 1.867867867867868, 1.4994994994994995, 1.2872872872872874, 1.5055055055055055, 1.5955955955955956, 1.4914914914914914, 1.3913913913913913, 1.3273273273273274, 1.887887887887888, 1.8458458458458458, 1.2452452452452452, 1.3533533533533533, 1.3833833833833833, 1.1191191191191192, 1.2552552552552552, 1.2712712712712713, 1.2672672672672673, 1.3673673673673674, 1.1691691691691692, 1.1191191191191192, 1.2272272272272273, 1.1411411411411412, 1.3933933933933933, 1.1911911911911912, 1.2852852852852852, 1.2132132132132132, 1.053053053053053, 1.039039039039039, 1.045045045045045, 1.065065065065065, 1.043043043043043, 0.9429429429429429, 1.017017017017017, 1.117117117117117, 0.974974974974975, 1.1111111111111112, 0.9369369369369369, 1.029029029029029, 0.968968968968969]

omegas = [[np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(1.9798994974874373), np.float64(1.879396984924623), np.float64(1.6281407035175879), np.float64(1.7487437185929648), np.float64(1.778894472361809), np.float64(1.7085427135678393), np.float64(2.0), np.float64(1.4170854271356783), np.float64(1.5376884422110553), np.float64(1.3668341708542713), np.float64(1.2663316582914572), np.float64(1.2160804020100502), np.float64(1.256281407035176), np.float64(1.2160804020100502), np.float64(1.3768844221105527), np.float64(1.2763819095477387), np.float64(1.3366834170854272), np.float64(1.2160804020100502), np.float64(1.306532663316583), np.float64(1.2663316582914572), np.float64(1.236180904522613), np.float64(1.256281407035176), np.float64(1.185929648241206), np.float64(1.256281407035176), np.float64(1.4371859296482412), np.float64(1.135678391959799), np.float64(1.135678391959799), np.float64(1.3467336683417086), np.float64(1.135678391959799), np.float64(1.3768844221105527), np.float64(1.2160804020100502), np.float64(1.2261306532663316), np.float64(1.1256281407035176), np.float64(1.155778894472362), np.float64(1.2261306532663316), np.float64(1.2763819095477387), np.float64(1.185929648241206), np.float64(1.1658291457286432), np.float64(1.155778894472362), np.float64(1.1457286432160805), np.float64(1.2462311557788945), np.float64(1.1256281407035176), np.float64(1.0552763819095476), np.float64(1.1457286432160805), np.float64(0.9949748743718593), np.float64(1.105527638190955)],
[np.float64(0.010050251256281407), np.float64(1.728643216080402), np.float64(1.5778894472361809), np.float64(1.4773869346733668), np.float64(1.728643216080402), np.float64(1.7889447236180904), np.float64(1.8190954773869348), np.float64(1.8592964824120604), np.float64(1.6683417085427137), np.float64(1.879396984924623), np.float64(1.6281407035175879), np.float64(1.5979899497487438), np.float64(1.5175879396984926), np.float64(1.6080402010050252), np.float64(1.728643216080402), np.float64(1.5678391959798996), np.float64(1.3869346733668342), np.float64(1.2763819095477387), np.float64(1.2462311557788945), np.float64(1.2864321608040201), np.float64(1.5778894472361809), np.float64(1.5276381909547738), np.float64(1.3366834170854272), np.float64(1.407035175879397), np.float64(1.3467336683417086), np.float64(1.1758793969849246), np.float64(1.2864321608040201), np.float64(1.1959798994974875), np.float64(1.3467336683417086), np.float64(1.236180904522613), np.float64(1.155778894472362), np.float64(1.236180904522613), np.float64(1.256281407035176), np.float64(1.256281407035176), np.float64(1.155778894472362), np.float64(0.964824120603015), np.float64(0.9346733668341709), np.float64(0.9949748743718593), np.float64(1.015075376884422), np.float64(0.7839195979899498), np.float64(1.135678391959799), np.float64(0.914572864321608), np.float64(0.9547738693467337), np.float64(0.964824120603015), np.float64(1.105527638190955), np.float64(0.8442211055276382), np.float64(0.8442211055276382), np.float64(0.9547738693467337), np.float64(0.9447236180904522), np.float64(0.8442211055276382)],
[np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(1.7386934673366834), np.float64(1.8894472361809045), np.float64(1.7587939698492463), np.float64(1.8090452261306533), np.float64(1.9698492462311559), np.float64(1.9798994974874373), np.float64(0.914572864321608), np.float64(0.9346733668341709), np.float64(0.8743718592964824), np.float64(0.9949748743718593), np.float64(1.015075376884422), np.float64(0.9849246231155779), np.float64(1.236180904522613), np.float64(1.0954773869346734), np.float64(1.256281407035176), np.float64(1.0753768844221105), np.float64(1.185929648241206), np.float64(1.0954773869346734), np.float64(0.9949748743718593), np.float64(1.0753768844221105), np.float64(0.9246231155778895), np.float64(0.8542713567839196), np.float64(0.9849246231155779), np.float64(1.0753768844221105), np.float64(1.0050251256281406), np.float64(0.9748743718592965), np.float64(0.9849246231155779), np.float64(1.0552763819095476), np.float64(1.0954773869346734), np.float64(1.185929648241206), np.float64(0.7939698492462312), np.float64(0.8442211055276382), np.float64(0.8844221105527639), np.float64(0.8442211055276382), np.float64(0.7336683417085427), np.float64(0.8140703517587939), np.float64(0.8743718592964824), np.float64(0.7738693467336684), np.float64(0.7638190954773869), np.float64(0.8844221105527639), np.float64(0.6633165829145728), np.float64(0.9547738693467337), np.float64(0.864321608040201), np.float64(0.8743718592964824), np.float64(0.9447236180904522), np.float64(0.964824120603015), np.float64(0.8844221105527639)],
[np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(1.8592964824120604), np.float64(1.9195979899497488), np.float64(1.949748743718593), np.float64(1.6683417085427137), np.float64(1.92964824120603), np.float64(1.2160804020100502), np.float64(1.5075376884422111), np.float64(1.6884422110552764), np.float64(1.8693467336683418), np.float64(1.5879396984924623), np.float64(1.849246231155779), np.float64(1.4874371859296482), np.float64(1.306532663316583), np.float64(1.3869346733668342), np.float64(1.5577889447236182), np.float64(1.4773869346733668), np.float64(1.4572864321608041), np.float64(1.2261306532663316), np.float64(1.35678391959799), np.float64(1.3266331658291457), np.float64(1.1658291457286432), np.float64(1.2462311557788945), np.float64(1.2864321608040201), np.float64(1.2663316582914572), np.float64(1.1758793969849246), np.float64(1.236180904522613), np.float64(1.2964824120603016), np.float64(1.3366834170854272), np.float64(1.2964824120603016), np.float64(1.2160804020100502), np.float64(1.1758793969849246), np.float64(1.1658291457286432), np.float64(1.306532663316583), np.float64(1.0753768844221105), np.float64(1.135678391959799), np.float64(1.085427135678392), np.float64(1.1457286432160805), np.float64(1.065326633165829), np.float64(1.236180904522613), np.float64(0.9447236180904522), np.float64(1.0552763819095476), np.float64(0.9748743718592965), np.float64(0.9547738693467337), np.float64(0.964824120603015), np.float64(1.015075376884422), np.float64(1.0552763819095476), np.float64(1.0452261306532664)],
[np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(1.9698492462311559), np.float64(1.728643216080402), np.float64(1.9899497487437185), np.float64(1.9396984924623115), np.float64(1.9698492462311559), np.float64(1.9899497487437185), np.float64(1.9597989949748744), np.float64(1.5276381909547738), np.float64(1.728643216080402), np.float64(1.9798994974874373), np.float64(1.5879396984924623), np.float64(1.6683417085427137), np.float64(1.879396984924623), np.float64(1.7989949748743719), np.float64(1.8391959798994975), np.float64(1.8592964824120604), np.float64(1.6080402010050252), np.float64(1.7085427135678393), np.float64(1.5778894472361809), np.float64(1.6884422110552764), np.float64(1.4271356783919598), np.float64(1.6080402010050252), np.float64(1.3668341708542713), np.float64(1.5075376884422111), np.float64(1.4170854271356783), np.float64(1.5477386934673367), np.float64(1.3467336683417086), np.float64(1.3869346733668342), np.float64(1.256281407035176), np.float64(1.3869346733668342), np.float64(1.1457286432160805), np.float64(1.3266331658291457), np.float64(1.2261306532663316), np.float64(1.065326633165829), np.float64(1.0552763819095476), np.float64(1.155778894472362), np.float64(1.1457286432160805), np.float64(1.1155778894472361), np.float64(1.0753768844221105), np.float64(1.2160804020100502), np.float64(1.0251256281407035), np.float64(1.0452261306532664), np.float64(0.914572864321608), np.float64(1.0954773869346734), np.float64(1.0452261306532664), np.float64(1.1155778894472361), np.float64(0.9346733668341709), np.float64(0.9447236180904522)],
[np.float64(0.010050251256281407), np.float64(1.7889447236180904), np.float64(1.9095477386934674), np.float64(1.8090452261306533), np.float64(1.7487437185929648), np.float64(1.6683417085427137), np.float64(1.5376884422110553), np.float64(1.6683417085427137), np.float64(1.8693467336683418), np.float64(1.879396984924623), np.float64(1.8190954773869348), np.float64(1.206030150753769), np.float64(1.4271356783919598), np.float64(1.0452261306532664), np.float64(1.1658291457286432), np.float64(1.2160804020100502), np.float64(1.0954773869346734), np.float64(1.065326633165829), np.float64(1.085427135678392), np.float64(1.1658291457286432), np.float64(1.2160804020100502), np.float64(1.2261306532663316), np.float64(1.1959798994974875), np.float64(1.015075376884422), np.float64(1.1658291457286432), np.float64(1.2160804020100502), np.float64(0.964824120603015), np.float64(1.105527638190955), np.float64(0.9849246231155779), np.float64(1.105527638190955), np.float64(1.2261306532663316), np.float64(0.9547738693467337), np.float64(1.1155778894472361), np.float64(1.256281407035176), np.float64(1.2462311557788945), np.float64(1.0452261306532664), np.float64(0.914572864321608), np.float64(1.105527638190955), np.float64(1.035175879396985), np.float64(1.0251256281407035), np.float64(1.1256281407035176), np.float64(1.135678391959799), np.float64(0.9447236180904522), np.float64(0.9547738693467337), np.float64(1.085427135678392), np.float64(1.0552763819095476), np.float64(1.0753768844221105), np.float64(1.0954773869346734), np.float64(1.1155778894472361), np.float64(0.9346733668341709)],
[np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(1.5879396984924623), np.float64(2.0), np.float64(0.964824120603015), np.float64(1.3969849246231156), np.float64(1.3768844221105527), np.float64(1.2261306532663316), np.float64(1.407035175879397), np.float64(1.2763819095477387), np.float64(1.2663316582914572), np.float64(1.1457286432160805), np.float64(1.306532663316583), np.float64(1.135678391959799), np.float64(1.0753768844221105), np.float64(1.206030150753769), np.float64(1.2663316582914572), np.float64(1.2864321608040201), np.float64(1.306532663316583), np.float64(1.0753768844221105), np.float64(1.2462311557788945), np.float64(1.2261306532663316), np.float64(1.236180904522613), np.float64(1.2261306532663316), np.float64(1.085427135678392), np.float64(1.105527638190955), np.float64(1.065326633165829), np.float64(1.1155778894472361), np.float64(1.2160804020100502), np.float64(1.065326633165829), np.float64(1.3768844221105527), np.float64(1.0050251256281406), np.float64(1.065326633165829), np.float64(0.9547738693467337), np.float64(1.236180904522613), np.float64(1.0954773869346734), np.float64(1.2261306532663316), np.float64(1.1658291457286432), np.float64(1.1658291457286432), np.float64(1.1658291457286432), np.float64(1.0452261306532664), np.float64(1.105527638190955), np.float64(1.035175879396985), np.float64(0.9748743718592965), np.float64(1.0251256281407035), np.float64(0.9447236180904522), np.float64(1.0050251256281406), np.float64(1.0251256281407035), np.float64(1.065326633165829)],
[np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(1.7487437185929648), np.float64(1.9095477386934674), np.float64(1.7386934673366834), np.float64(1.8592964824120604), np.float64(1.8592964824120604), np.float64(1.6984924623115578), np.float64(1.6884422110552764), np.float64(1.7487437185929648), np.float64(1.9698492462311559), np.float64(1.6884422110552764), np.float64(1.6381909547738693), np.float64(1.9095477386934674), np.float64(1.8894472361809045), np.float64(1.7185929648241207), np.float64(1.5778894472361809), np.float64(1.7889447236180904), np.float64(1.306532663316583), np.float64(1.3467336683417086), np.float64(1.5075376884422111), np.float64(1.2864321608040201), np.float64(1.2964824120603016), np.float64(1.35678391959799), np.float64(1.3467336683417086), np.float64(1.2462311557788945), np.float64(1.4472361809045227), np.float64(1.2964824120603016), np.float64(1.4170854271356783), np.float64(1.2763819095477387), np.float64(1.3869346733668342), np.float64(1.206030150753769), np.float64(1.1658291457286432), np.float64(1.2763819095477387), np.float64(1.2160804020100502), np.float64(1.3366834170854272), np.float64(1.3467336683417086), np.float64(1.35678391959799), np.float64(1.2462311557788945), np.float64(1.3869346733668342), np.float64(1.2964824120603016), np.float64(1.1959798994974875), np.float64(1.1959798994974875), np.float64(1.185929648241206), np.float64(1.236180904522613), np.float64(1.306532663316583), np.float64(1.0050251256281406), np.float64(0.9949748743718593), np.float64(1.1457286432160805)],
[np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(1.7487437185929648), np.float64(1.92964824120603), np.float64(1.849246231155779), np.float64(1.7185929648241207), np.float64(1.7688442211055277), np.float64(1.949748743718593), np.float64(1.9396984924623115), np.float64(1.949748743718593), np.float64(1.8090452261306533), np.float64(1.6080402010050252), np.float64(1.6482412060301508), np.float64(1.8090452261306533), np.float64(1.6683417085427137), np.float64(1.5376884422110553), np.float64(1.5376884422110553), np.float64(1.2763819095477387), np.float64(1.2663316582914572), np.float64(1.3366834170854272), np.float64(1.2864321608040201), np.float64(1.1758793969849246), np.float64(1.3266331658291457), np.float64(1.3165829145728642), np.float64(1.5778894472361809), np.float64(1.4271356783919598), np.float64(1.3165829145728642), np.float64(1.4371859296482412), np.float64(1.4371859296482412), np.float64(1.3768844221105527), np.float64(1.0954773869346734), np.float64(1.3969849246231156), np.float64(1.1758793969849246), np.float64(1.1758793969849246), np.float64(1.2763819095477387), np.float64(1.3467336683417086), np.float64(1.2964824120603016), np.float64(1.1758793969849246), np.float64(0.9748743718592965), np.float64(1.0452261306532664), np.float64(1.0050251256281406), np.float64(1.015075376884422), np.float64(0.8844221105527639), np.float64(1.206030150753769), np.float64(0.9949748743718593), np.float64(1.0552763819095476), np.float64(1.0251256281407035), np.float64(1.1457286432160805), np.float64(1.0753768844221105)],
[np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(0.010050251256281407), np.float64(1.7889447236180904), np.float64(1.949748743718593), np.float64(2.0), np.float64(1.9798994974874373), np.float64(1.9899497487437185), np.float64(1.7587939698492463), np.float64(1.7688442211055277), np.float64(1.879396984924623), np.float64(1.3768844221105527), np.float64(1.3668341708542713), np.float64(1.5477386934673367), np.float64(1.4974874371859297), np.float64(1.35678391959799), np.float64(1.3366834170854272), np.float64(1.4773869346733668), np.float64(1.4874371859296482), np.float64(1.185929648241206), np.float64(1.2864321608040201), np.float64(1.3366834170854272), np.float64(1.1959798994974875), np.float64(1.4673366834170853), np.float64(1.4371859296482412), np.float64(1.3869346733668342), np.float64(1.3969849246231156), np.float64(1.2160804020100502), np.float64(1.1959798994974875), np.float64(1.2462311557788945), np.float64(1.1658291457286432), np.float64(1.155778894472362), np.float64(0.9949748743718593), np.float64(1.0753768844221105), np.float64(0.9547738693467337), np.float64(1.0452261306532664), np.float64(1.1658291457286432), np.float64(1.085427135678392), np.float64(1.0452261306532664), np.float64(1.015075376884422), np.float64(1.035175879396985), np.float64(1.0954773869346734), np.float64(1.1155778894472361)]]
for omega_path in omegas:
    plt.plot([n+3 for n in range(50)], omega_path)
plt.savefig("learning_rate_path.png")
